Don't use syslog in signal handler as syslog is not signal handler safe. It
can for example deadlock if another syslog call is interrupted.
--- openssh-4.3p1/serverloop.c.signal	2005-12-31 06:33:37.000000000 +0100
+++ openssh-4.3p1/serverloop.c	2006-02-06 20:01:27.000000000 +0100
@@ -146,7 +146,6 @@
 sigchld_handler(int sig)
 {
 	int save_errno = errno;
-	debug("Received SIGCHLD.");
 	child_terminated = 1;
 #ifndef _UNICOS
 	mysignal(SIGCHLD, sigchld_handler);
@@ -749,6 +748,7 @@
 	sigaddset(&nset, SIGCHLD);
 	sigprocmask(SIG_BLOCK, &nset, &oset);
 	if (child_terminated) {
+		debug("Received SIGCHLD.");
 		while ((pid = waitpid(-1, &status, WNOHANG)) > 0 ||
 		    (pid < 0 && errno == EINTR))
 			if (pid > 0)
--- openssh-4.3p1/sshd.c.signal	2006-02-01 17:08:17.000000000 +0100
+++ openssh-4.3p1/sshd.c	2006-02-01 17:08:17.000000000 +0100
@@ -311,8 +311,7 @@
 	if (use_privsep && pmonitor != NULL && pmonitor->m_pid > 0)
 		kill(pmonitor->m_pid, SIGALRM);
 
-	/* Log error and exit. */
-	fatal("Timeout before authentication for %s", get_remote_ipaddr());
+	cleanup_exit(SIGALRM);
 }
 
 /*
